#include <iostream>
#include <vector>
#include <memory>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <stdexcept>

class Figure {
public:
    virtual std::string Name() const = 0;
    virtual double Perimeter() const = 0;
    virtual double Area() const = 0;
};

class Triangle : public Figure {
public:
    Triangle(int a, int b, int c) : a_(a), b_(b), c_(c) {}

    std::string Name() const override {
        return "TRIANGLE";
    }

    double Perimeter() const override {
        return a_ + b_ + c_;
    }

    double Area() const override {
        double p = Perimeter() / 2;
        return sqrt(p * (p - a_) * (p - b_) * (p - c_));
    }

private:
    int a_, b_, c_;
};

class Rect : public Figure {
public:
    Rect(int width, int height) : width_(width), height_(height) {}

    std::string Name() const override {
        return "RECT";
    }

    double Perimeter() const override {
        return 2 * (width_ + height_);
    }

    double Area() const override {
        return width_ * height_;
    }

private:
    int width_, height_;
};

class Circle : public Figure {
public:
    Circle(int r) : r_(r) {}

    std::string Name() const override {
        return "CIRCLE";
    }

    double Perimeter() const override {
        return 2 * PI * r_;
    }

    double Area() const override {
        return PI * r_ * r_;
    }

private:
    int r_;
    const double PI = 3.14;
};

std::shared_ptr<Figure> CreateFigure(std::istringstream& is) {
    std::string type;
    is >> type;
    if (type == "RECT") {
        int width, height;
        is >> width >> height;
        return std::make_shared<Rect>(width, height);
    }
    else if (type == "TRIANGLE") {
        int a, b, c;
        is >> a >> b >> c;
        return std::make_shared<Triangle>(a, b, c);
    }
    else if (type == "CIRCLE") {
        int r;
        is >> r;
        return std::make_shared<Circle>(r);
    }
    throw std::runtime_error("Wrong figure name");
}

int main() {
    std::vector<std::shared_ptr<Figure>> figures;
    for (std::string line; std::getline(std::cin, line); ) {
        std::istringstream is(line);

        std::string command;
        is >> command;
        if (command == "ADD") {
            is >> std::ws;
            try {
                figures.push_back(CreateFigure(is));
            }
            catch (const std::runtime_error& e) {
                std::cout << e.what() << std::endl;
            }
        }
        else if (command == "PRINT") {
            for (const auto& current_figure : figures) {
                std::cout << std::fixed << std::setprecision(3)
                    << current_figure->Name() << " "
                    << current_figure->Perimeter() << " "
                    << current_figure->Area() << std::endl;
            }
        }
    }
    return 0;
}
